(-(f*d*a)/(f*c)+b)
 
/randomIntFromInterval(1,10)
 
/randomIntFromInterval(1,10)
 
/randomIntFromInterval(1,10)
 
/r
 
/randomIntFromInterval(1,10)
 
/randomIntFromInterval(1,10)
 
not 
 
ew
 
import let_Q1 from '../Problem/limit'
import let_Q2 from '../Problem/quadratic'
import { shuffle } from '../Problem/utility'
 
, What is x?
 
,shuffle 
 
  let x1 = randomIntFromInterval(-10, 10)/randomIntFromInterval(1,10)
  let x2 = randomIntFromInterval(-10, 10)/randomIntFromInterval(1,10)
  let x3 = randomIntFromInterval(-10, 10)/randomIntFromInterval(1,10)
  let x4 = randomIntFromInterval(-10, 10)/randomIntFromInterval(1,10)
 
  let let_Ans=-b/a
 
function randomIntFromInterval(min:number, max:number) { // min and max included 
    // https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript
  return Math.floor(Math.random() * (max - min + 1) + min)
}
 
/randomIntFromInterval(1,10)
 
(a*c).toString()+"x^2 + "+(a*d+b*c).toString()+" x + "+b*d+" = 0, What is x?"
 
ls.push()
 
let let_Question=[]
let let_Options:number[][]=[]
let let_Answer=[]
 
let rndInt = randomIntFromInterval(-10, 10)/randomIntFromInterval(1,10)
 
    text-align: center;
        align-items: center;
        justify-content: center;
 
style={{backgroundColor:'red'}}
 
a(255,255,255,1)
 
ackgroundColor:'rgba(255,255,255, 1)',padding:'10px'}}
 
// 
 
"Start" 
 
<div style={{height:'10px'}}></div>
 
{
JSX_Start
}
 
</div>
 
<div style={{position:'absolute'}}>
 
</>
 
7
 
    display:flex;
 
    margin-top: 25vh;
 
display: 'flex',
 
width:'300px'
 
lassName='Text
 
.Text{
    font-size: 16;
}
 
justifyContent: 'center'
 
display: 'flex'
 
display: 'inline-block'
 
,transform: 'translateY(50%)'
 
fontSize:'16px'
 
R
 
color:'black',
    height:'100vh',
    backgroundRepeat: 'no-repeat',
    backgroundColor:'#0299D3',
    backgroundPosition: "Right"
 
createContext,
 
const[SS_IsOpen,setSS_IsOpen]=useState<boolean>(false)
 
<input type='color'></input>
 
ttps://www.amazon.com/Weezer-Blue-Album/dp/B000003TAW
 
https://www.amazon.com/Weezer-Blue-Album/dp/B000003TAW
 
backgroundColor:'green'
 
 style={{}}
 
justifyContent: 'space-between'
 
Display={'inline-block'}
 
Color={'green'}
 
Display={'inline-block'}
 
,marginLeft:'10px'
 
<UI_Title Text={'
 
}/>
 
</div>
 
inline-
 
// Ans
 
function f_Answer(index:number){
    if(SS_IsAns===false){
        setSS_IsAns(true)
        setSS_Answer(index)
    }
}
 
// UnAns & Ans
 
// UnAns & Ans
 

// UnAns & Ans
 
{JSX_Space}
 
</>
 
div
 
div style={{display:'block'}}
 
</div>
 
\n
 
<h1 className='YourName'>{Text}</h1>
 
marginTop:'-20px',
 
{
//
 
}
<h1>deded</h1>
 
*/}
<h1>dedefe</h1>
 
{/*
 
<p>
 
<p>dedefe</p>
 
,height: '100vh'
 
 style={{backgroundImage: `url(${img})`,marginTop:'-20px',color:'red'}}
 
{/*
<My_Context.Provider
value={{
    Quiz:SS_Quiz,
    setQuiz:setSS_Quiz,
    Score:SS_Score,
    setScore:setSS_Score,
    ThisPage:SS_ThisPage,
    setThisPage:setSS_ThisPage,
}}
>
{
//<Page/>
}
[<h1>deded</h1>]

</My_Context.Provider>
*/}
 
</>
 
<>
 
</>
 
backgroundImage: `url(${img})`,
 
<h1>deded</h1>
 
    color: azure;
 
<Page/>
 
style={{height:'100%'}}
 
 , height:'100%'
 
* as 
 
.toString()
 
</div>
 
Build a 
 
    setSS_IsAns(false)
 
    setSS_IsAns(false)
    setSS_Answer(null)
 
<UI_Button 
Color={'white'} 
Text="Next Question" 
Function={()=>{
    SS.setThisPage((SS.ThisPage+1)%SS.Quiz.length);
    setSS_IsAns(false)
}}
Key={-1}
/>
 
<UI_Button 
Color={'white'} 
Text="Start" 
Function={()=>SS.setThisPage(0)}
Key={-2}
/>
 
].Answer
 
SS.Quiz[
 
var cheche='cheche'
 
import { useContext } from "react"
 
if(index===)
 
alert(index)
 
</il>
 
 style={{display:'block'}}
 
<div></div>
 
<li>{i}</li>
 
.Questions
 
<UI_Button 
Color={'white'} 
Text="Start" 
Function={()=>alert('')}
Key={-2}
/>
 
<div>
{
JSX_Question
}
{
JSX_Answer
}
</div>
 
''
 
<p></p>
 
SS_
 
SS_T
 
SS_
 
SS_
 
SS_
 
SS_
 
SS_
 
 
 
SS_
 
const SS_ThisPage=useContext(My_Context)
const SS_Score=useContext(My_Context)
 
let SS_Quiz=['','sggd','emma']
 
    SS_IsOpen:SS_IsOpen,
    setSS_IsOpen:setSS_IsOpen
 
    SS_IsOpen:false,
    setSS_IsOpen:()=>{}
 
    SS_IsOpen:boolean,
    setSS_IsOpen:(S:boolean)=>void
 
const SS_ThisPage=useContext(My_Context)
 
SS_Score
 

SS_Score:number
 
 "+SS_PageNo.toString()+"/"+Length.toString()
 
let JSX_Next =''
 
{JSX_}
 
<UI_Title Text={'React Quiz'}/>
 
<UI_Title Text={"Score "+SS_Score.toString()}/>
 
<UI_Title Text={"Score "+SS_Score.toString()}/>
 
export default ss='ss'
 
 const 
 
Question:[
      "What is A?",
      "What is B?",
      "What is C?",
      "What is E?",
  ],
  Choice:[
      ['a','b','c','d'],
      ['a','b','c','d'],
      ['a','b','c','d'],
      ['a','b','c','None'],
  ],
  Answer:[
      0,
      1,
      2
  ]
 
export type TS_Context={
    SS_Quiz:TS_Quiz,
    setSS_Quiz:(S:TS_Quiz)=>void
    SS_ThisPage:number,
    setSS_ThisPage:(S:number)=>void,
    SS_Score:number,
    setSS_Score:(S:number)=>void
}

const My_Context=createContext<TS_Context>({
    SS_Quiz:{
        Question:[''],
        Choice:[['']],
        Answer:[0]
    },
    setSS_Quiz:()=>{},
    SS_ThisPage:0,
    setSS_ThisPage:()=>{},
    SS_Score:0,
    setSS_Score:()=>{}
})
 
_Header
 
import My_Context;
 
const {SS_ThisPage} = useContext(My_Context);
 
React.
 
import My_Co
 
(S:TS_Quiz)=>void
 
['']
 
TS_Quiz
 
    const [value, setValue] = useState("foo");
    const [value2, setValue2] = useState("goo");
 
foo
 
      {props.children}
 
const Provider({}:{})=>{
  const [value, setValue] = useState("foo");
  const [value2, setValue2] = useState("goo");

  return (

  );
};
 
    <Context.Provider
      value={{ value: [value, setValue], value2: [value2, setValue2] }}
    >
      {props.children}
    </Context.Provider>
 
 = props => 
 
 = props => 
 
React.
 
React.
 
import { Context } from "../Context"
 
const {SS_ThisPage}=useContext(Context)
 
<TS_Context>
 
SS_ThisPage
 
function OpenNextPage(){
    if
}
 
<TS_Context>
 
<TS_Context
 
{
    SS_Quiz:{
        Question:[
            'What is A?',
            'What is B?',
            'What is C?'
        ],
        Choice:[
            ['a','b','c','d'],
            ['a','b','c','d'],
            ['a','b','c','d'],
        ],
        Answer:[
            0,
            1,
            2
        ]
    },
    setSS_Quiz:()=>{},
    SS_Score:0,
    setSS_Score:()=>{},
    SS_ThisPage:0,
    setSS_ThisPage:()=>{}
}
 
{
    SS_Quiz:{
        Question:[
            'What is A?',
            'What is B?',
            'What is C?'
        ],
        Choice:[
            ['a','b','c','d'],
            ['a','b','c','d'],
            ['a','b','c','d'],
        ],
        Answer:[
            0,
            1,
            2
        ]
    },
    setSS_Quiz:()=>{},
    SS_Score:0,
    setSS_Score:()=>{},
    SS_ThisPage:0,
    setSS_ThisPage:()=>{}
}
 
    SS_Quiz:{
        Question:[
            'What is A?',
            'What is B?',
            'What is C?'
        ],
        Choice:[
            ['a','b','c','d'],
            ['a','b','c','d'],
            ['a','b','c','d'],
        ],
        Answer:[
            0,
            1,
            2
        ]
    },
    setSS_Quiz:()=>{},
 
    SS_Quiz:TS_Quiz,
    setSS_Quiz:(S:TS_Quiz)=>void,
 
export 
 
{
    SS_Quiz:{
        Question:['What is A?','What is B?','What is C?'],
        Choice:[
            ['a','b','c','d'],
            ['a','b','c','d'],
            ['a','b','c','d'],
        ],
        Answer:[
            0,
            1,
            2
        ]
    },
    setSS_Quiz:()=>{},
    SS_Score:0,
    setSS_Score:()=>{},
    SS_ThisPage:0,
    setSS_ThisPage:()=>{}
}
 
S:TS_Quiz)=>void
 
TS_Quiz
 
SS_File:          {
        AllFiles:null,
        SelectThisFile:{
            index:0,
            mode:'Default'
        },
        FolderName:{
            Img:'',
            Text:''
        }
    },
    setSS_File:()=>{},
    SS_OCR:{
        Operate:   false,
        Languages: null,
        PSM:       uPSM[0],
    },
    setSS_OCR:     ()=>{},
    SS_ShowImg:{
        Zoom:1,
        OriginalImage:"EditedImage",
    },
    setSS_ShowImg:()=>{},
    SS_EditImg:{
        Operate:false,
        Color:"Gray",
        Rotate:0
    },
    setSS_EditImg:()=>{},
    SS_ThisOCR:null,
    setSS_ThisOCR:()=>{},
    SS_ThisEditImg:null,
    setSS_ThisEditImg:()=>{}
 
    SS_File:          {
        AllFiles:null,
        SelectThisFile:{
            index:0,
            mode:'Default'
        },
        FolderName:{
            Img:'',
            Text:''
        }
    },
    setSS_File:()=>{},
    SS_OCR:{
        Operate:   false,
        Languages: null,
        PSM:       uPSM[0],
    },
    setSS_OCR:     ()=>{},
    SS_ShowImg:{
        Zoom:1,
        OriginalImage:"EditedImage",
    },
    setSS_ShowImg:()=>{},
    SS_EditImg:{
        Operate:false,
        Color:"Gray",
        Rotate:0
    },
    setSS_EditImg:()=>{},
    SS_ThisOCR:null,
    setSS_ThisOCR:()=>{},
    SS_ThisEditImg:null,
    setSS_ThisEditImg:()=>{}
 
_Main
 
_Main
 
_Main
 
Correct
 

const UI_Button = (
{
Color,
Text,
Function,
Key
}
:{
Color:string,
Text:string,
Function:(S:void)=>void,
Key:number
})=>{
return(

<button style={{backgroundColor:Color}} key={Key} onClick={()=>Function()}>{Text}</button>

)
}

export default UI_Button
 
<button style={{backgroundColor:Color}} key={Key} onClick={()=>Function()}>{Text}</button>

 
Function:(S:void)=>void,
Key:number
 
Color:string,
 
Color,
 
Function,
Key
 
if(index===Correct){
let_color='green'
}
 
if()
 
if(index===Correct){
let_color='green'
}
 
else 
 

}
 

}
 
<UI_Button
Color="#AA0000"
Text={Choice[0]}
Function={()=>alert("Goodbye Jojo")}
Key={0}
/>
<UI_Button
Color="#AA0000"
Text="Hello Dio"
Function={()=>alert("Goodbye Jojo")}
Key={0}
/>
<UI_Button
Color="#AA0000"
Text="Hello Dio"
Function={()=>alert("Goodbye Jojo")}
Key={0}
/>
<UI_Button
Color="#AA0000"
Text="Hello Dio"
Function={()=>alert("Goodbye Jojo")}
Key={0}
/>
 
Color:string,
Text:string,
Function:(S:void)=>void,
Key:number
 
Color,
Text,
Function,
Key
 

<button style={{backgroundColor:Color}} key={Key} onClick={()=>Function()}>{Text}</button>

 
import UI_Button from "./UI_Button"
 
<UI_Button
Color="#AA0000"
Text="Hello Dio"
Function={()=>alert("Goodbye Jojo")}
Key={0}
/>
<UI_Button
Color="#AA0000"
Text="Hello Dio"
Function={()=>alert("Goodbye Jojo")}
Key={0}
/>
<UI_Button
Color="#AA0000"
Text="Hello Dio"
Function={()=>alert("Goodbye Jojo")}
Key={0}
/>
<UI_Button
Color="#AA0000"
Text="Hello Dio"
Function={()=>alert("Goodbye Jojo")}
Key={0}
/>
 
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.tsx</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
    </div>
 
()=>
 
<div>
 
</div>
 
//************************************************************************************
// USESTATE
//************************************************************************************
const[SS_EditImg,setSS_EditImg]=useState<TS_SS_EditImg>({
    Operate:false,
    Color:"Gray",
    Rotate:0
})
const[SS_ShowImg,setSS_ShowImg]=useState<TS_SS_ShowImg>({
    Zoom:1,
    OriginalImage:"EditedImage",
})
const[SS_OCR,setSS_OCR]=useState<TS_SS_OCR>({
Operate:   false,
Languages: null,
PSM:       uPSM[0] ,
})
const[SS_ThisEditImg,setSS_ThisEditImg]=useState<TS_SS_EditImg[]|null>(null)
const[SS_ThisOCR,setSS_ThisOCR]=useState<TS_SS_OCR[]|null>(null)

const[SS_File,setSS_File]=useState<TS_SS_File>({
    AllFiles:null,
    SelectThisFile:{
        index:0,
        mode:'Default'
    },
    FolderName:{
        Img:'',
        Text:''
    }
})
//************************************************************************************
// USEEFFECT
//************************************************************************************
useEffect(()=>{
    //...
},[])
//************************************************************************************
// VARIABLE
//************************************************************************************

//************************************************************************************
// FUNCTION
//************************************************************************************
//************************************************************************************
// OUTPUT
//************************************************************************************
//...
 
